/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.FinancialAdvisorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
//import Business.FinancialAdvisorAndPlans.FinancialAdvisor;
import Business.FinancialAdvisorAndPlans.FinancialPlan;
import Business.Organization.CustomerOrganization;
import Business.Organization.FinancialAdvisorOrganization;
import Business.WorkQueue.FinancialAdvisorWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vigensh Raghuraman
 */
public class SuggestFinancialPlanJpanel extends javax.swing.JPanel {

    /**
     * Creates new form SuggestFinancialPlanJpanel
     */
    private JPanel userProcessContainer;
    private Organization org;
    private EcoSystem system;
    private String name;
    private Enterprise enterprise;
    private String type;
    
    public SuggestFinancialPlanJpanel(JPanel userProcessContainer,Organization organization,EcoSystem system,String name,Enterprise enterprise, String type) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.org=organization;
        this.system=system;
        this.name=name;
        this.enterprise=enterprise;
        this.type=type;
        populateAllPlanJTable();
    }
    
    private void serveComplete(){
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof CustomerOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            for(WorkRequest request:org.getWorkQueue().getWorkRequestList()){
            if(((FinancialAdvisorWorkRequest)request).getCustName().equalsIgnoreCase(name)){
                org.getWorkQueue().getWorkRequestList().remove(request);
            }
        }
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        custPlansJTbl = new javax.swing.JTable();
        planSendBtn = new javax.swing.JButton();
        addPlanBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        finPlansJTbl = new javax.swing.JTable();
        remPlanBtn1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Suggest Plans");

        custPlansJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plan Name", "Frequency", "Term", "Interest Rate", "Maturity Period", "EMI Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        custPlansJTbl.setGridColor(new java.awt.Color(255, 255, 255));
        custPlansJTbl.setSelectionBackground(new java.awt.Color(0, 51, 102));
        jScrollPane1.setViewportView(custPlansJTbl);
        if (custPlansJTbl.getColumnModel().getColumnCount() > 0) {
            custPlansJTbl.getColumnModel().getColumn(0).setResizable(false);
            custPlansJTbl.getColumnModel().getColumn(1).setResizable(false);
            custPlansJTbl.getColumnModel().getColumn(2).setResizable(false);
            custPlansJTbl.getColumnModel().getColumn(3).setResizable(false);
            custPlansJTbl.getColumnModel().getColumn(4).setResizable(false);
            custPlansJTbl.getColumnModel().getColumn(5).setResizable(false);
        }

        planSendBtn.setBackground(new java.awt.Color(0, 51, 102));
        planSendBtn.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        planSendBtn.setForeground(new java.awt.Color(255, 255, 255));
        planSendBtn.setText("Send to Customer");
        planSendBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        planSendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planSendBtnActionPerformed(evt);
            }
        });

        addPlanBtn.setBackground(new java.awt.Color(0, 51, 102));
        addPlanBtn.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addPlanBtn.setForeground(new java.awt.Color(255, 255, 255));
        addPlanBtn.setText("Add Plan");
        addPlanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlanBtnActionPerformed(evt);
            }
        });

        finPlansJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plan Name", "Frequency", "Term", "Interest Rate", "Maturity Period", "EMI Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        finPlansJTbl.setGridColor(new java.awt.Color(255, 255, 255));
        finPlansJTbl.setSelectionBackground(new java.awt.Color(0, 51, 102));
        jScrollPane2.setViewportView(finPlansJTbl);
        if (finPlansJTbl.getColumnModel().getColumnCount() > 0) {
            finPlansJTbl.getColumnModel().getColumn(0).setResizable(false);
            finPlansJTbl.getColumnModel().getColumn(1).setResizable(false);
            finPlansJTbl.getColumnModel().getColumn(2).setResizable(false);
            finPlansJTbl.getColumnModel().getColumn(3).setResizable(false);
            finPlansJTbl.getColumnModel().getColumn(4).setResizable(false);
            finPlansJTbl.getColumnModel().getColumn(5).setResizable(false);
        }

        remPlanBtn1.setBackground(new java.awt.Color(0, 51, 102));
        remPlanBtn1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        remPlanBtn1.setForeground(new java.awt.Color(255, 255, 255));
        remPlanBtn1.setText("Remove Plan");
        remPlanBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remPlanBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(planSendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addPlanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(400, 400, 400)
                        .addComponent(remPlanBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPlanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remPlanBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(planSendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addPlanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlanBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = finPlansJTbl.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "please select row");
            return;
        }
        FinancialPlan selectedPlan = (FinancialPlan)finPlansJTbl.getValueAt(selectedRow, 0);
        DefaultTableModel model1 = (DefaultTableModel) finPlansJTbl.getModel();
        DefaultTableModel model = (DefaultTableModel) custPlansJTbl.getModel();
        //if(custPlansJTbl.getRowCount()==0){
        //model.setRowCount(0);
        Object[] row = new Object[6];
            row[0] = selectedPlan;
            row[1] = selectedPlan.getPlanType();
            row[2] = selectedPlan.getPlanFrequency();
            row[3] = selectedPlan.getPlanRoi();
            row[4] = selectedPlan.getPlanTime();
            row[5] = selectedPlan.getPlanEMI();
            model.addRow(row);
            model1.removeRow(selectedRow);
        //}
//        else{
//            Object[] row = new Object[6];
//            row[0] = selectedPlan;
//            row[1] = selectedPlan.getPlanType();
//            row[2] = selectedPlan.getPlanFrequency();
//            row[3] = selectedPlan.getPlanRoi();
//            row[4] = selectedPlan.getPlanTime();
//            row[5] = selectedPlan.getPlanEMI();
//            model.addRow(row);
//            model1.removeRow(selectedRow);
//            populateAllPlanJTable();
//        }
//        else{
//            boolean alreadyPresent =false;
//            for(int i=0;i<custPlansJTbl.getRowCount();i++){
//                if(custPlansJTbl.getValueAt(i, 0).equals(selectedPlan)){
//                     alreadyPresent=true;
//                     break;
//                   
//                }
//                
//                                            
//            }
//             if(!alreadyPresent){
//                 Object[] row = new Object[6];
//                        row[0] = selectedPlan;
//                        row[1] = selectedPlan.getPlanType();
//                        row[2] = selectedPlan.getPlanFrequency();
//                        row[3]=selectedPlan.getPlanRoi();
//                        row[4]=selectedPlan.getPlanTime();
//                        row[5]=selectedPlan.getPlanEMI();
//                        model.addRow(row);
//
//             }
//             
//             else{
//                    JOptionPane.showMessageDialog(null, "Please add a different plan or send to customer for further process", "ERROR", JOptionPane.ERROR_MESSAGE);
//             }
//                        
//            
//        }
    }//GEN-LAST:event_addPlanBtnActionPerformed

    private void planSendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_planSendBtnActionPerformed
        // TODO add your handling code here:
        int c=0;
        for(int i=0;i<custPlansJTbl.getRowCount();i++){
            FinancialAdvisorWorkRequest request= new FinancialAdvisorWorkRequest();
            FinancialPlan plan= (FinancialPlan)custPlansJTbl.getValueAt(i, 0);
            request.setNotify(true);
            request.setFinancialPlan(plan);
            request.setCustName(name);
            request.setCustType(type);
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                if (organization instanceof CustomerOrganization){
                    org = organization;
                    break;
                }
            }
            if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(request);
                    c++;
            }
        }
        if(c!=0){
            JOptionPane.showMessageDialog(null, "Request Sent Successfully");
            populateAllPlanJTable();
            DefaultTableModel model = (DefaultTableModel) custPlansJTbl.getModel();
            while(model.getRowCount()>0){
                model.removeRow(0);
            }
            //serveComplete();
        }
        else{
            
        }
        
    }//GEN-LAST:event_planSendBtnActionPerformed

    private void remPlanBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remPlanBtn1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = custPlansJTbl.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "please select row");
            return;
        }
        FinancialPlan selectedPlan = (FinancialPlan)custPlansJTbl.getValueAt(selectedRow, 0);
        DefaultTableModel model1 = (DefaultTableModel) custPlansJTbl.getModel();
        DefaultTableModel model = (DefaultTableModel) finPlansJTbl.getModel();
//        if(finPlansJTbl.getRowCount()==0){
        //model.setRowCount(0);
        Object[] row = new Object[6];
            row[0] = selectedPlan;
            row[1] = selectedPlan.getPlanType();
            row[2] = selectedPlan.getPlanFrequency();
            row[3] = selectedPlan.getPlanRoi();
            row[4] = selectedPlan.getPlanTime();
            row[5] = selectedPlan.getPlanEMI();
            model.addRow(row);
            model1.removeRow(selectedRow);
//        }
//        else{
//            Object[] row = new Object[6];
//            row[0] = selectedPlan;
//            row[1] = selectedPlan.getPlanType();
//            row[2] = selectedPlan.getPlanFrequency();
//            row[3] = selectedPlan.getPlanRoi();
//            row[4] = selectedPlan.getPlanTime();
//            row[5] = selectedPlan.getPlanEMI();
//            model.addRow(row);
//            model1.removeRow(selectedRow);
//            populateAllPlanJTable();
//        }
//        else{
//            boolean alreadyPresent =false;
//            for(int i=0;i<custPlansJTbl.getRowCount();i++){
//                if(custPlansJTbl.getValueAt(i, 0).equals(selectedPlan)){
//                     alreadyPresent=true;
//                     break;
//                   
//                }
//                
//                                            
//            }
//             if(!alreadyPresent){
//                 Object[] row = new Object[6];
//                        row[0] = selectedPlan;
//                        row[1] = selectedPlan.getPlanType();
//                        row[2] = selectedPlan.getPlanFrequency();
//                        row[3]=selectedPlan.getPlanRoi();
//                        row[4]=selectedPlan.getPlanTime();
//                        row[5]=selectedPlan.getPlanEMI();
//                        model.addRow(row);
//
//             }
//             
//             else{
//                    JOptionPane.showMessageDialog(null, "Please add a different plan or send to customer for further process", "ERROR", JOptionPane.ERROR_MESSAGE);
//             }
//                        
//            
    

    }//GEN-LAST:event_remPlanBtn1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPlanBtn;
    private javax.swing.JTable custPlansJTbl;
    private javax.swing.JTable finPlansJTbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton planSendBtn;
    private javax.swing.JButton remPlanBtn1;
    // End of variables declaration//GEN-END:variables

    private void populateAllPlanJTable() {
        DefaultTableModel model = (DefaultTableModel) finPlansJTbl.getModel();

        model.setRowCount(0);
        for (FinancialPlan fPlan : system.getPlanDirectory().getPlanList()) {
        Object[] row = new Object[6];
        row[0] = fPlan;
        row[1] = fPlan.getPlanFrequency();
        row[2] = fPlan.getPlanType();
        row[3] = fPlan.getPlanRoi();
        row[4] = fPlan.getPlanTime();
        row[5] = fPlan.getPlanEMI();

        model.addRow(row);
        }
    }
}
