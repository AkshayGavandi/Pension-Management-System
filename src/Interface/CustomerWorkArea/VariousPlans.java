/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.CustomerWorkArea;

import Business.Enterprise.Enterprise;
import Business.FinancialAdvisorAndPlans.FinancialPlan;
import Business.Organization.AccountsOrganization;
import Business.Organization.FinancialAdvisorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AccountsWorkRequest;
import Business.WorkQueue.FinancialAdvisorWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import static Interface.LoginWorkArea.backgroundBlue;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shreyansh
 */
public class VariousPlans extends javax.swing.JPanel {

    /**
     * Creates new form VariousPlans
     */
    private JPanel upc;
    private Organization organization;
    private UserAccount userAccount;
    private Enterprise enterprise;
    
    public VariousPlans(JPanel userProcessContainer,Organization organization,UserAccount userAccount,Enterprise enterprise) {
        initComponents();
        this.upc=userProcessContainer;
        this.organization=organization;
        this.userAccount=userAccount;
        this.enterprise=enterprise;
        populatePlansTable();
        custType.setVisible(false);
        
    }
    
    public void   populatePlansTable(){

    DefaultTableModel tableModel = (DefaultTableModel) listOfPlansTable.getModel();
    tableModel.setRowCount(0);
        for(WorkRequest request:organization.getWorkQueue().getWorkRequestList()){
            if(((FinancialAdvisorWorkRequest)request).getCustName().equalsIgnoreCase(userAccount.getUsername())){
                String type = ((FinancialAdvisorWorkRequest)request).getCustType();
                custType.setText(type);
                Object[] row = new Object[6];
                row[0] = ((FinancialAdvisorWorkRequest)request).getFinancialPlan();
                row[1] = ((FinancialAdvisorWorkRequest)request).getFinancialPlan().getPlanType();
                row[2] = ((FinancialAdvisorWorkRequest)request).getFinancialPlan().getPlanFrequency();
                row[3] = ((FinancialAdvisorWorkRequest)request).getFinancialPlan().getPlanRoi();
                row[4] = ((FinancialAdvisorWorkRequest)request).getFinancialPlan().getPlanTime();
                row[5] = ((FinancialAdvisorWorkRequest)request).getFinancialPlan().getPlanEMI();
                tableModel.addRow(row);
            }    
        }
    }

    public void updateEstimatedROI(){
        double totalROI = 0;
        for(int i=0;i<selectedPlansTable.getRowCount();i++){
            String planAmt_str=String.valueOf(selectedPlansTable.getValueAt(i, 5));
            String planTime_str=String.valueOf(selectedPlansTable.getValueAt(i, 4));
            String planInterest_str=String.valueOf(selectedPlansTable.getValueAt(i, 3));
            double interest = 0;
            double principleAmt=0;
            if(custType.getText().equalsIgnoreCase("Salaried")){
                principleAmt = Integer.valueOf(planTime_str)*Double.parseDouble(planAmt_str);
                interest = (Integer.valueOf(planTime_str)*Double.parseDouble(planAmt_str)*Double.parseDouble(planInterest_str))/1200;
                jLabel12.setText("On Maturity");
            }
            else if(custType.getText().equalsIgnoreCase("Retirees")){
                principleAmt = Double.parseDouble(planAmt_str)/Integer.valueOf(planTime_str);
                interest = (Double.parseDouble(planAmt_str)*Double.parseDouble(planInterest_str))/(1200);
                jLabel12.setText("/Month");
            }
            double planROI = principleAmt+interest;
            totalROI+=planROI;
        }
        txtEstimateROI.setText(String.valueOf(totalROI));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOfPlansTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        remPlanBtn = new javax.swing.JButton();
        addToCartBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedPlansTable = new javax.swing.JTable();
        buyBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        selectRiskCBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtEstimateROI = new javax.swing.JTextField();
        custType = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        backLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backLabelMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setText("Your Selected Plans");

        listOfPlansTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plan Name", "Plan Type", "Plan Frequency", "Interest Rate", "Maturity Period", "EMI Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(listOfPlansTable);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel1.setText("List of Plans");

        remPlanBtn.setBackground(new java.awt.Color(0, 51, 102));
        remPlanBtn.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        remPlanBtn.setForeground(new java.awt.Color(255, 255, 255));
        remPlanBtn.setText("Remove Plan");
        remPlanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remPlanBtnActionPerformed(evt);
            }
        });

        addToCartBtn.setBackground(new java.awt.Color(0, 51, 102));
        addToCartBtn.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addToCartBtn.setForeground(new java.awt.Color(255, 255, 255));
        addToCartBtn.setText("Add to Cart");
        addToCartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartBtnActionPerformed(evt);
            }
        });

        selectedPlansTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plan Name", "Plan Type", "Plan Frequency", "Interest Rate", "Maturity Period", "EMI Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(selectedPlansTable);

        buyBtn.setBackground(new java.awt.Color(0, 51, 102));
        buyBtn.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        buyBtn.setForeground(new java.awt.Color(255, 255, 255));
        buyBtn.setText("Buy");
        buyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel2.setText("Customise Your Plans");

        jButton4.setBackground(new java.awt.Color(0, 51, 102));
        jButton4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Clear list");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel11.setText("Select Risk");

        selectRiskCBox.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        selectRiskCBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "High Risk", "Medium Risk", "Low Risk" }));
        selectRiskCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRiskCBoxActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setText("Estimated Return on Investment");

        txtEstimateROI.setEditable(false);
        txtEstimateROI.setDisabledTextColor(new java.awt.Color(255, 255, 255));

        custType.setOpaque(false);

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(backLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(addToCartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(400, 400, 400)
                                    .addComponent(remPlanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(400, 400, 400)
                                .addComponent(selectRiskCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(85, 85, 85)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtEstimateROI, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(custType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(400, 400, 400)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(backLabel)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(custType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addToCartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remPlanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectRiskCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstimateROI, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMouseClicked
        // TODO add your handling code here:
//           userProcessContainer.remove(this);
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backLabelMouseClicked

    private void addToCartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = listOfPlansTable.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "please select row");
            return;
        }
        FinancialPlan selectedPlan = (FinancialPlan)listOfPlansTable.getValueAt(selectedRow, 0);
        DefaultTableModel model = (DefaultTableModel) selectedPlansTable.getModel();
        DefaultTableModel model1 = (DefaultTableModel) listOfPlansTable.getModel();
//        if(selectedPlansTable.getRowCount()==0){
//            model.setRowCount(0);
            Object[] row = new Object[6];
            row[0] = selectedPlan;
            row[1] = selectedPlan.getPlanType();
            row[2] = selectedPlan.getPlanFrequency();
            row[3] = selectedPlan.getPlanRoi();
            row[4] = selectedPlan.getPlanTime();
            row[5] = selectedPlan.getPlanEMI();
            model.addRow(row);
            model1.removeRow(selectedRow);
            updateEstimatedROI();
//        }
//        else{
//            boolean alreadyPresent =false;
//            for(int i=0;i<selectedPlansTable.getRowCount();i++){
//                if(selectedPlansTable.getValueAt(i, 0).equals(selectedPlan)){
//                    alreadyPresent=true;
//                    break;
//
//                }
//
//            }
//            if(!alreadyPresent){
//                Object[] row = new Object[6];
//                row[0] = selectedPlan;
//                row[1] = selectedPlan.getPlanType();
//                row[2] = selectedPlan.getPlanFrequency();
//                row[3]=selectedPlan.getPlanRoi();
//                row[4]=selectedPlan.getPlanTime();
//                row[5]=selectedPlan.getPlanEMI();
//                model.addRow(row);
//
//            }
//
//            else{
//                JOptionPane.showMessageDialog(null, "Plan already added, Please add a different plan for further process", "ERROR", JOptionPane.ERROR_MESSAGE);
//            }
//
//        }

    }//GEN-LAST:event_addToCartBtnActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) listOfPlansTable.getModel();
            while(model.getRowCount()>0){
                model.removeRow(0);
            }
//        for(WorkRequest request:organization.getWorkQueue().getWorkRequestList()){
//            if(((FinancialAdvisorWorkRequest)request).getCustName().equalsIgnoreCase(userAccount.getUsername())){
//                organization.getWorkQueue().getWorkRequestList().remove(request);
//            }
//        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void remPlanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remPlanBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = selectedPlansTable.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "please select row");
            return;
        }
        FinancialPlan selectedPlan = (FinancialPlan)selectedPlansTable.getValueAt(selectedRow, 0);
        DefaultTableModel model = (DefaultTableModel) listOfPlansTable.getModel();
        DefaultTableModel model1 = (DefaultTableModel) selectedPlansTable.getModel();
//        if(selectedPlansTable.getRowCount()==0){
//            model.setRowCount(0);
            Object[] row = new Object[6];
            row[0] = selectedPlan;
            row[1] = selectedPlan.getPlanType();
            row[2] = selectedPlan.getPlanFrequency();
            row[3] = selectedPlan.getPlanRoi();
            row[4] = selectedPlan.getPlanTime();
            row[5] = selectedPlan.getPlanEMI();
            model.addRow(row);
            model1.removeRow(selectedRow);
            updateEstimatedROI();
    }//GEN-LAST:event_remPlanBtnActionPerformed

    private void buyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBtnActionPerformed
        // TODO add your handling code here:
        double amount=0;
        AccountsWorkRequest accRequest=new AccountsWorkRequest();
        
        for(int i=0;i<selectedPlansTable.getRowCount();i++){
            String planAmt_str=String.valueOf(selectedPlansTable.getValueAt(i, 5));
            String planTime_str=String.valueOf(selectedPlansTable.getValueAt(i, 4));
            String planName = String.valueOf(selectedPlansTable.getValueAt(i, 0));
            String planType = String.valueOf(selectedPlansTable.getValueAt(i, 1));
            String frequency = String.valueOf(selectedPlansTable.getValueAt(i, 2));
            double interest = Double.parseDouble(String.valueOf(selectedPlansTable.getValueAt(i, 3)));
            double planAmt=0;
            if(custType.getText().equalsIgnoreCase("Salaried")){
                planAmt= Double.parseDouble(planAmt_str)*Integer.valueOf(planTime_str);
            }
            else if(custType.getText().equalsIgnoreCase("Retirees")){
                planAmt=Double.parseDouble(planAmt_str);
            }
            else{
                planAmt=Double.parseDouble(planAmt_str);
            }
            amount=amount+planAmt;
            accRequest.setNotify(true);
            accRequest.setCustType(custType.getText());
            accRequest.setPlanType(planType);
            accRequest.setPlanName(planName);
            accRequest.setFrequency(frequency);
            accRequest.setRate(interest);
            accRequest.setAmount(amount);
            accRequest.setEnterprise(enterprise);
            accRequest.setMessage("Bought plan "+String.valueOf(selectedPlansTable.getValueAt(i, 0)));
            accRequest.setStatus("Awaiting process");
            accRequest.setUserAccount(userAccount);
            accRequest.setPeriod(Integer.valueOf(planTime_str));
            accRequest.setRisk(selectRiskCBox.getSelectedItem().toString());
        }
        Organization org = null;

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof AccountsOrganization){
            org = organization;
//            while(!org.getWorkQueue().getWorkRequestList().isEmpty())
//            org.getWorkQueue().getWorkRequestList().remove(0);
            break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(accRequest);
            JOptionPane.showMessageDialog(null, "Request Sent Successfully");
            
        //userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
            

        
    }//GEN-LAST:event_buyBtnActionPerformed

    private void selectRiskCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRiskCBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectRiskCBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartBtn;
    private javax.swing.JLabel backLabel;
    private javax.swing.JButton buyBtn;
    private javax.swing.JTextField custType;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable listOfPlansTable;
    private javax.swing.JButton remPlanBtn;
    private javax.swing.JComboBox selectRiskCBox;
    private javax.swing.JTable selectedPlansTable;
    private javax.swing.JTextField txtEstimateROI;
    // End of variables declaration//GEN-END:variables
}
